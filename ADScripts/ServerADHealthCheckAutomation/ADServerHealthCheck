#############################################################################
#       Author: Ajaz Ahmed
#       Reviewer:    
#       Date: 11/5/2015
#       Status: Ping,Netlogon,NTDS,DNS,DCdiag Test(Replication,Services)
#       Description: Server and AD Health Status
#############################################################################
###########################Define Variables##################################

$reportpath = "G:\DailyCheck\ADReport.htm" 

if((test-path $reportpath) -like $false)
{
new-item $reportpath -type file
}

$timeout = "60"
###############################HTml Report Content############################
$report = $reportpath

Clear-Content $report 
Add-Content $report "<html>" 
Add-Content $report "<head>" 
Add-Content $report "<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1'>" 
Add-Content $report '<title>AD Status Report</title>' 
add-content $report '<STYLE TYPE="text/css">' 
add-content $report  "<!--" 
add-content $report  "td {" 
add-content $report  "font-family: Tahoma;" 
add-content $report  "font-size: 11px;" 
add-content $report  "border-top: 1px solid #999999;" 
add-content $report  "border-right: 1px solid #999999;" 
add-content $report  "border-bottom: 1px solid #999999;" 
add-content $report  "border-left: 1px solid #999999;" 
add-content $report  "padding-top: 0px;" 
add-content $report  "padding-right: 0px;" 
add-content $report  "padding-bottom: 0px;" 
add-content $report  "padding-left: 0px;" 
add-content $report  "}" 
add-content $report  "body {" 
add-content $report  "margin-left: 5px;" 
add-content $report  "margin-top: 5px;" 
add-content $report  "margin-right: 0px;" 
add-content $report  "margin-bottom: 10px;" 
add-content $report  "" 
add-content $report  "table {"
add-content $report  "table-layout:fixed;" 
add-content $report  "border: thin solid #000000;" 
add-content $report  "}" 
add-content $report  "-->" 
add-content $report  "</style>" 
Add-Content $report "</head>" 
Add-Content $report "<body>" 


add-content $report  "<table width='100%'>" 
add-content $report  "<tr bgcolor='Lavender'>" 
add-content $report  "<td colspan='8' height='25' align='center'>" 
add-content $report  "<font face='tahoma' color='#003399' size='4'><strong>CAQH Active Directory Health Check</strong></font>" 
add-content $report  "</td>" 
add-content $report  "</tr>" 
add-content $report  "</table>" 
 
add-content $report  "<table width= '100%'>" 
Add-Content $report  "<tr bgcolor='IndianRed'>" 
Add-Content $report  "<td width= '20%' align='center'><B>Identity</B></td>" 
Add-Content $report  "<td width= '13.33%' align='center'><B>PingStatus</B></td>" 
Add-Content $report  "<td width= '13.33%' align='center'><B>NetlogonService</B></td>"
Add-Content $report  "<td width= '13.33%' align='center'><B>DNSServiceStatus</B></td>" 
Add-Content $report  "<td width= '13.33%' align='center'><B>ReplicationTest</B></td>"
Add-Content $report  "<td width= '13.33%' align='center'><B>ServicesTest</B></td>"
Add-Content $report  "<td width= '13.33%' align='center'><B>TimeSource</B></td>"
 
Add-Content $report "</tr>" 

#####################################Get ALL DC Servers#################################
$getForest = [system.directoryservices.activedirectory.Forest]::GetCurrentForest()

$DCServers = $getForest.domains | ForEach-Object {$_.DomainControllers} | ForEach-Object {$_.Name} 

#$DCServers = Get-ADDomainController -Filter * | foreach { $_.hostName }

################Ping Test######

foreach ($DC in $DCServers){
$Identity = $DC
                Add-Content $report "<tr>"
if ( Test-Connection -ComputerName $DC -Count 1 -ErrorAction SilentlyContinue ) {
Write-Host $DC `t $DC `t Ping Success -ForegroundColor Green
 
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B> $Identity</B></td>" 
                Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>Success</B></td>" 

                ##############Netlogon Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "Netlogon" -ErrorAction SilentlyContinue} -ArgumentList $DC
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $DC `t Netlogon Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>NetlogonTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
               
               ######################################################
                ##############DNS Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "DNS" -ErrorAction SilentlyContinue} -ArgumentList $DC
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $DC `t DNS Server Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>DNSTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $DC `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
               
               ########################################################
               ####################Replications status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:Replications /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t Replications Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>ReplicationsTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test Replications"))
                  {
                  Write-Host $DC `t Replications Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>ReplicationsPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t Replications Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>ReplicationsFail</B></td>"
                  }
                }
               ########################################################
	       ####################Services status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $sysvol = start-job -scriptblock {dcdiag /test:Services /s:$($args[0])} -ArgumentList $DC
               wait-job $sysvol -timeout $timeout
               if($sysvol.state -like "Running")
               {
               Write-Host $DC `t Services Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>ServicesTimeout</B></td>"
               stop-job $sysvol
               }
               else
               {
               $sysvol1 = Receive-job $sysvol
               if($cmp::instr($sysvol1, "passed test Services"))
                  {
                  Write-Host $DC `t Services Test passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>ServicesPassed</B></td>"
                  }
               else
                  {
                  Write-Host $DC `t Services Test Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>ServicesFail</B></td>"
                  }
                }

 	    ####################Time Source status##################

 	       $TimeServer = w32tm /query /computer:$DC /source 
 
               $time = start-job -scriptblock {w32tm /query /computer:$($args[0]) /source } -ArgumentList $DC
               wait-job $time -timeout $timeout
               if($time.state -like "Running")
               {
               Write-Host $DC `t Timesource Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Red' align=center><B>TimeSourceFailing</B></td>"
               stop-job $time
               }
               else
               {
		 Write-Host $DC `t Timesource Test passed -ForegroundColor Green
                 Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$TimeServer</B></td>"
               }
               
               ########################################################
                
} 
else
              {
Write-Host $DC `t $DC `t Ping Fail -ForegroundColor Red
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B> $Identity</B></td>" 
                Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>" 
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
		Add-Content $report "<td bgcolor= 'Red' align=center>  <B>Ping Fail</B></td>"
} 
Add-Content $report "</tr>"        
       
} 


Add-content $report  "</table> <br> <br>"



$QPM = "INFCAQAP0069.caqh.local"

############################################QPM Services###########################
add-content $report  "<table width='100%'>" 
add-content $report  "<tr bgcolor='Lavender'>" 
add-content $report  "<td colspan='7' height='25' align='center'>" 
add-content $report  "<font face='tahoma' color='#003399' size='4'><strong>CAQH QPM Health Check</strong></font>" 
add-content $report  "</td>" 
add-content $report  "</tr>" 
add-content $report  "</table>" 
 
add-content $report  "<table width= '100%'>" 
Add-Content $report  "<tr bgcolor='IndianRed'>" 
Add-Content $report  "<td width= '20%' align='center'><B>Identity</B></td>" 
Add-Content $report  "<td width= '40%' align='center'><B>PingStatus</B></td>" 
Add-Content $report  "<td width= '40%' align='center'><B>QPMService</B></td>"
 
Add-Content $report "</tr>" 

 
Add-Content $report "<tr>"
if ( Test-Connection -ComputerName $QPM -Count 1 -ErrorAction SilentlyContinue ) {
Write-Host $DC `t $QPM `t Ping Success -ForegroundColor Green
 
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B>$QPM</B></td>" 
                Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>Success</B></td>" 

##############QPM Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "QPMService" -ErrorAction SilentlyContinue} -ArgumentList 10.163.74.87
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $QPM `t QPMService Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>QPMServiceTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $QPM `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $QPM `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
               
} 
Add-Content $report "</tr>"
Add-content $report  "</table> <br> <br>"



############################################CA Health Check###########################
add-content $report  "<table width='100%'>" 
add-content $report  "<tr bgcolor='Lavender'>" 
add-content $report  "<td colspan='7' height='25' align='center'>" 
add-content $report  "<font face='tahoma' color='#003399' size='4'><strong>CAQH CA Health Check</strong></font>" 
add-content $report  "</td>" 
add-content $report  "</tr>" 
add-content $report  "</table>" 
 
add-content $report  "<table width= '100%'>" 
Add-Content $report  "<tr bgcolor='IndianRed'>" 
Add-Content $report  "<td width= '20%' align='center'><B>Identity</B></td>" 
Add-Content $report  "<td width= '26.66%' align='center'><B>PingStatus</B></td>" 
Add-Content $report  "<td width= '26.66%' align='center'><B>CA Service</B></td>"
Add-Content $report  "<td width= '26.66%' align='center'><B>Certutil</B></td>"
 
Add-Content $report "</tr>" 

$CAList = "INFCAQAP0052.caqh.local", "INFCAQAP0015.caqh.local"


foreach ($CA in $CAList)
{
 
Add-Content $report "<tr>"
if ( Test-Connection -ComputerName $CA -Count 1 -ErrorAction SilentlyContinue ) 
	{
	Write-Host $DC `t $CA `t Ping Success -ForegroundColor Green
 
		Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B>$CA</B></td>" 
                Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>Success</B></td>" 

##############CA Service Status################
		$serviceStatus = start-job -scriptblock {get-service -ComputerName $($args[0]) -Name "certsvc" -ErrorAction SilentlyContinue} -ArgumentList $CA
                wait-job $serviceStatus -timeout $timeout
                if($serviceStatus.state -like "Running")
                {
                 Write-Host $CA `t Certsvc Service TimeOut -ForegroundColor Yellow
                 Add-Content $report "<td bgcolor= 'Yellow' align=center><B>CertsvcTimeout</B></td>"
                 stop-job $serviceStatus
                }
                else
                {
                $serviceStatus1 = Receive-job $serviceStatus
                 if ($serviceStatus1.status -eq "Running") {
 		   Write-Host $CA `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Green 
         	   $svcName = $serviceStatus1.name 
         	   $svcState = $serviceStatus1.status          
         	   Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>$svcState</B></td>" 
                  }
                 else 
                  { 
       		  Write-Host $CA `t $serviceStatus1.name `t $serviceStatus1.status -ForegroundColor Red 
         	  $svcName = $serviceStatus1.name 
         	  $svcState = $serviceStatus1.status          
         	  Add-Content $report "<td bgcolor= 'Red' align=center><B>$svcState</B></td>" 
                  } 
                }
###############################Certutil status##################
               add-type -AssemblyName microsoft.visualbasic 
               $cmp = "microsoft.visualbasic.strings" -as [type]
               $certutil = start-job -scriptblock {C:\Windows\System32\certutil -config INFCAQAP0052.CAQH.local\CAQH-INFCAQAP0052-CA -getconfig }
	       $certutilR = start-job -scriptblock {C:\Windows\System32\certutil -config INFCAQAP0015.CAQH.local\CAQH-ROOT-CA -getconfig }
               wait-job $certutil -timeout $timeout
	       wait-job $certutilR -timeout $timeout
               
	       if($certutil.state -like "Running" -or $certutilR.state -like "Running")
               {
               Write-Host $CA `t CertUtil Test TimeOut -ForegroundColor Yellow
               Add-Content $report "<td bgcolor= 'Yellow' align=center><B>CertutilTimeout</B></td>"
               stop-job $certutilR
		stop-job $certutil
               }
               else
               {
               $certutil1 = Receive-job $certutil
	       $certutilR1 = Receive-job $certutilR
               if($cmp::instr($certutilR1, "CertUtil: -getconfig command completed successfully") -and $cmp::instr($certutil1, "CertUtil: -getconfig command completed successfully"))
                  {
                  Write-Host $CA `t Certutil passed -ForegroundColor Green
                  Add-Content $report "<td bgcolor= 'Aquamarine' align=center><B>CertutilPassed</B></td>"
                  }
	       else
                  {
                  Write-Host $CA `t Certutil Failed -ForegroundColor Red
                  Add-Content $report "<td bgcolor= 'Red' align=center><B>CertutilFailed</B></td>"
                  }
                }
               
	} 
}
Add-Content $report "</tr>"
Add-content $report  "</table><br><br>" 

############################################Server Health Check###########################
add-content $report  "<table width='100%'>" 
add-content $report  "<tr bgcolor='Lavender'>" 
add-content $report  "<td colspan='7' height='25' align='center'>" 
add-content $report  "<font face='tahoma' color='#003399' size='4'><strong>CAQH Servers Health Check</strong></font>" 
add-content $report  "</td>" 
add-content $report  "</tr>" 
add-content $report  "</table>" 
 
add-content $report  "<table width= '100%'>" 
Add-Content $report  "<tr bgcolor='IndianRed'>" 
Add-Content $report  "<td width= '20%' align='center'><B>Identity</B></td>" 
Add-Content $report  "<td width= '40%' align='center'><B>Total Disk Space (GB)</B></td>" 
Add-Content $report  "<td width= '40%' align='center'><B>Disk Space Available (GB)</B></td>"
 
Add-Content $report "</tr>" 

$ServerList = @("INFCAQAP0001.caqh.local",
"INFCAQAP0002.caqh.local",
"INFCAQDP0012.caqh.local",
"INFCAQDP0013.caqh.local",
"INFCAQAP0069.caqh.local",
"INFCAQAP0052.caqh.local",
"INFCAQAP0015.caqh.local",
"INFCAQAP0014.caqh.local",
"INFCAQAP0033.caqh.local",
"INFCAQAP0011.caqh.local",
"INFCAQAP0012.caqh.local",
"INFCAQAP0103.caqh.local"
)

foreach ($Server in $ServerList)
{
	
        Add-Content $report "<tr>"
	Add-Content $report "<td bgcolor= 'GainsBoro' align=center>  <B> $Server</B></td>"

	########################Diskspace Status################
	
	<#
	$TotalSize=get-WmiObject win32_logicaldisk -ComputerName $Server -Filter "Drivetype=3" |  ft DeviceID,@{Label="Total Size";Expression={ [math]::round($_.Size / 1gb -as [float],2) }} -autosize -hidetableheaders 
	$Freespace=get-WmiObject win32_logicaldisk -ComputerName $Server -Filter "Drivetype=3" |  ft DeviceID,@{Label="Free Size";Expression={ [math]::round($_.freespace / 1gb -as [float],2) }} -autosize -hidetableheaders
        Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>$TotalSize</B></td>"
        Add-Content $report "<td bgcolor= 'Aquamarine' align=center>  <B>$Freespace</B></td>" 
	Write-Host 't Calculating Diskspace passed -ForegroundColor Green
        
	#>

	$diskC = Get-WmiObject Win32_LogicalDisk -ComputerName $server -Filter "DeviceID='C:'" | Select-Object Size,FreeSpace
	
	$freeC = [math]::round($diskC.freespace / 1gb -as [float],2)
	$totalC= [math]::round($diskC.size / 1gb -as [float],2)

	
	$diskF = Get-WmiObject Win32_LogicalDisk -ComputerName $server -Filter "DeviceID='F:'" | Select-Object Size,FreeSpace
	
	$freeF = [math]::round($diskF.freespace / 1gb -as [float],2)
	$totalF= [math]::round($diskF.size / 1gb -as [float],2)


	$diskG = Get-WmiObject Win32_LogicalDisk -ComputerName $server -Filter "DeviceID='G:'" | Select-Object Size,FreeSpace
	
	$freeG = [math]::round($diskG.freespace / 1gb -as [float],2)
	$totalG= [math]::round($diskG.size / 1gb -as [float],2)


	$diskH = Get-WmiObject Win32_LogicalDisk -ComputerName $server -Filter "DeviceID='H:'" | Select-Object Size,FreeSpace
	
	$freeH = [math]::round($diskH.freespace / 1gb -as [float],2)
	$totalH= [math]::round($diskH.size / 1gb -as [float],2)

	if ($totalF -eq 0 -and $totalG -ne 0 -and $totalH -ne 0){
	Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$totalC &nbsp;&nbsp;&nbsp;&nbsp; G:$totalG &nbsp;&nbsp;&nbsp;&nbsp; H:$totalH</B></td>"
        if ($freeC -ge 5)
	{
		Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp&nbsp;&nbsp;&nbsp; G:$freeG &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
	}
	else
	{
		if ($freeC -gt 1)
		{
		Add-Content $report "<td bgcolor= 'Yellow' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; G:$freeG &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
		}
		else
		{
		Add-Content $report "<td bgcolor= 'Red' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; G:$freeG &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
		}
	}}
	if ($totalG -eq 0 -and $totalF -ne 0 -and $totalH -ne 0){
	Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$totalC &nbsp;&nbsp;&nbsp;&nbsp; F:$totalF &nbsp;&nbsp;&nbsp;&nbsp; H:$totalH</B></td>"
        if ($freeC -ge 5)
	{
		Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp&nbsp;&nbsp;&nbsp; F:$freeF &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
	}
	else
	{
		if ($freeC -gt 1)
		{
		Add-Content $report "<td bgcolor= 'Yellow' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; F:$freeF &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
		}
		else
		{
		Add-Content $report "<td bgcolor= 'Red' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; F:$freeF &nbsp;&nbsp;&nbsp;&nbsp; H:$freeH</B></td>"
		}
	}}

	if ($totalG -eq 0 -and $totalF -ne 0 -and $totalH -eq 0){
	Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$totalC &nbsp;&nbsp;&nbsp;&nbsp; F:$totalF </B></td>"
        if ($freeC -ge 5)
	{
		Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; F:$freeF </B></td>"
	}
	else
	{
		if ($freeC -gt 1)
		{
		Add-Content $report "<td bgcolor= 'Yellow' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; F:$freeF </B></td>"
		}
		else
		{
		Add-Content $report "<td bgcolor= 'Red' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; F:$freeF </B></td>"
		}
	}}
	
	if ($totalF -eq 0 -and $totalH -eq 0 -and $totalG -ne 0){
	Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$totalC &nbsp;&nbsp;&nbsp;&nbsp; G:$totalG </B></td>"
        if ($freeC -ge 5)
	{
		Add-Content $report "<td bgcolor= 'Aquamarine' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; G:$freeG </B></td>"
	}
	else
	{
		if ($freeC -gt 1)
		{
		Add-Content $report "<td bgcolor= 'Yellow' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; G:$freeG </B></td>"
		}
		else
		{
		Add-Content $report "<td bgcolor= 'Red' align=left>  <B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C:$freeC &nbsp;&nbsp;&nbsp;&nbsp; G:$freeG </B></td>"
		}
	}}
	Write-Host `t Calculating Diskspace on $Server passed -ForegroundColor Green
	
	Add-Content $report "</tr>"
	
}

Add-content $report  "</table>" 




Add-Content $report "</body>" 
Add-Content $report "</html>" 



del "G:\DailyCheck\HealthCheck-dcdiag+repadmin.zip"


dcdiag  /e >dcdiag.txt

repadmin /failcache * >replication.txt

repadmin /queue * >>replication.txt

repadmin /replsum * /bysrc /bydest /sort:delta >replication_sum.txt

Repadmin /showrepl * >replication_details.txt

Import-Module pscx
Write-Zip "G:\DailyCheck\*.txt" "G:\DailyCheck\HealthCheck-dcdiag+repadmin.zip"
$file = "G:\DailyCheck\HealthCheck-dcdiag+repadmin.zip"



########################################################################################
#############################################Send Email#################################

$head ={
'Dear Team, <br>
The CAQH Daily Check consists of various Services which are running in CAQH domain, like- AD, CA, QPM (as below). Attached file contains dcdiag and repadmin reports which are run on daily basis.
<br>'

}

$signature ={

'
<br><br>
Kindly review the above. Resolve issues ASAP and if required, please escalate to CAQH-Security-IDC-DirectoryServices@accenture.com.<br> 
Thanking in advance.<br>
<br>
Regards, <br>
Managed Security Services-IAM tools<br>
IO Managed Security Services| India Delivery Centre'

}


$smtphost = "IPAddress of the SMTP Host" 
$from = "EMail of Sender" 
$email1 = "EMail of Recipients"


$att = new-object Net.Mail.Attachment($file)

$subject = "Daily Health Check Monitor in AD domain" 
$bodyContent = Get-Content "G:\DailyCheck\ADreport.htm" 
$body = "$head $bodyContent $signature"
$smtp= New-Object System.Net.Mail.SmtpClient $smtphost 
$msg = New-Object System.Net.Mail.MailMessage 
$msg.To.Add($email1)
$msg.from = $from
$msg.subject = $subject
$msg.body = $body
$msg.Attachments.Add($att)
$msg.isBodyhtml = $true 
$smtp.send($msg) 
$att.Dispose()

########################################################################################

########################################################################################
 
         	
		
